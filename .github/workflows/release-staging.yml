name: Staging Release (Release Candidate)

permissions:
  contents: write
  actions: read
  checks: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g. 1.0.0) - will be tagged as v1.0.0-rc'
        required: true
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

jobs:
  build-staging-rc:
    name: Build Staging Release Candidate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'
          cache: gradle
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      
      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "BUILD_TYPE=staging" >> $GITHUB_ENV
          echo "VERSION_TAG=v${{ github.event.inputs.version }}-rc" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release Candidate v${{ github.event.inputs.version }}-rc" >> $GITHUB_ENV
          echo "APK_NAME=karage-app-${{ github.event.inputs.version }}-rc-staging-staging" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
                
      - name: Build APK
        run: |
          echo "Building variant: stagingStaging"
          ./gradlew assembleStagingStaging --no-configuration-cache
      
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1.0.4
        id: sign_apk
        with:
          releaseDirectory: app/build/outputs/apk/staging/staging
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "35.0.0"
      
      # Verify the signed APK
      - name: Verify APK
        run: |
          APK_PATH=${{ steps.sign_apk.outputs.signedReleaseFile }}
          echo "Verifying APK: $APK_PATH"
          $ANDROID_HOME/build-tools/35.0.0/apksigner verify --verbose $APK_PATH
      
      # Rename APK with proper naming convention
      - name: Rename APK
        run: |
          SIGNED_APK="${{ steps.sign_apk.outputs.signedReleaseFile }}"
          APK_DIR=$(dirname "$SIGNED_APK")
          APK_EXT=$(echo "$SIGNED_APK" | grep -o '\.[^.]*$')
          NEW_APK_PATH="$APK_DIR/${{ env.APK_NAME }}$APK_EXT"
          mv "$SIGNED_APK" "$NEW_APK_PATH"
          echo "FINAL_APK_PATH=$NEW_APK_PATH" >> $GITHUB_ENV
      
      # Create tag for staging RC
      - name: Create Tag
        if: github.event.inputs.create_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag already exists
          if git rev-parse "${{ env.VERSION_TAG }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.VERSION_TAG }} already exists, deleting and recreating"
            git tag -d "${{ env.VERSION_TAG }}" || true
            git push origin :refs/tags/${{ env.VERSION_TAG }} || true
          fi
          
          git tag -a "${{ env.VERSION_TAG }}" -m "${{ env.RELEASE_NAME }}"
          git push origin "${{ env.VERSION_TAG }}"
      
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}
          path: ${{ env.FINAL_APK_PATH }}
      
      # Create GitHub Release for staging RC
      - name: Create Release
        if: github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.FINAL_APK_PATH }}
          draft: true
          prerelease: true
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.VERSION_TAG }}
          body: |
            ## üöÄ ${{ env.RELEASE_NAME }}
            
            ‚ö†Ô∏è **This is a release candidate for testing purposes.**
            
            ### What's New
            - Bug fixes and improvements
            - Performance optimizations
            
            ### Build Information
            - Environment: Staging
            - Build Type: Staging
            - Version: ${{ github.event.inputs.version }}-rc
            
            ### Testing Instructions
            1. Download and install the APK file on your Android device
            2. Enable "Install from unknown sources" in your device settings
            3. Test all major functionality
            4. Report any issues before production release
            
            ### Next Steps
            After testing is complete and approved, create a production release using the main release workflow.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
